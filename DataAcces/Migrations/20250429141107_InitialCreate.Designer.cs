// <auto-generated />
using System;
using DataAcces;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAcces.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250429141107_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.BehaviorEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Communication")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InternId")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<byte>("RuleFollowing")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TaskUnderstanding")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("InternId");

                    b.HasIndex("ManagerId");

                    b.ToTable("BehaviorEvaluations");
                });

            modelBuilder.Entity("Core.Evaluation360", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Engagement")
                        .HasColumnType("tinyint");

                    b.Property<int>("EvaluatedId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.Property<byte>("Learnability")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Organization")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Teamwork")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatedId");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("Evaluation360s");
                });

            modelBuilder.Entity("Core.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Core.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Core.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GroupId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Core.TaskEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EvaluatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.Property<int>("InternId")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InternId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskEvaluations");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.BehaviorEvaluation", b =>
                {
                    b.HasOne("Core.User", "Intern")
                        .WithMany("BehaviorEvaluationsAsIntern")
                        .HasForeignKey("InternId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.User", "Manager")
                        .WithMany("BehaviorEvaluationsAsManager")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Intern");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Core.Evaluation360", b =>
                {
                    b.HasOne("Core.User", "Evaluated")
                        .WithMany("ReceivedEvaluations")
                        .HasForeignKey("EvaluatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.User", "Evaluator")
                        .WithMany("GivenEvaluations")
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evaluated");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("Core.Group", b =>
                {
                    b.HasOne("Core.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Core.Task", b =>
                {
                    b.HasOne("Core.User", "Creator")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Group", "Group")
                        .WithMany("Tasks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Core.TaskEvaluation", b =>
                {
                    b.HasOne("Core.User", "Intern")
                        .WithMany("TaskEvaluationsReceived")
                        .HasForeignKey("InternId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.User", "Manager")
                        .WithMany("TaskEvaluationsGiven")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Task", "Task")
                        .WithMany("Evaluations")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intern");

                    b.Navigation("Manager");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.HasOne("Core.Group", "Group")
                        .WithMany("Interns")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Group", b =>
                {
                    b.Navigation("Interns");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Core.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Task", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Navigation("BehaviorEvaluationsAsIntern");

                    b.Navigation("BehaviorEvaluationsAsManager");

                    b.Navigation("CreatedTasks");

                    b.Navigation("GivenEvaluations");

                    b.Navigation("ReceivedEvaluations");

                    b.Navigation("TaskEvaluationsGiven");

                    b.Navigation("TaskEvaluationsReceived");
                });
#pragma warning restore 612, 618
        }
    }
}
